# ** EXAM OBJECTIVE: QUERIES **
# GOAL: Create search queries for analyzed text, highlight, pagination, and sort
# REQUIRED SETUP: (i) a running Elasticsearch cluster with at least one node and a Kibana instance, (ii) add the "Sample web logs" and "Sample eCommerce orders" to Kibana
# Copy-paste the following instructions into your Kibana Dev Tools, and work directly from there

### Run the next queries on the `kibana_sample_data_logs` index
# Search for documents with the `message` field containing the string "Firefox"
# As above, but return up to 50 results
# As above, but return up to 50 results with an offset of 50 from the first
# Search for documents with the `message` field containing the strings "Firefox" or "Kibana"
# Search for documents with the `message` field containing both the strings "Firefox" and "Kibana"
# Search for documents with the `message` field containing at least two of the following strings: "Firefox", "Kibana", "159.64.35.129"
# As above, but also return the highlights for the `message` field
# As above, but also wrap the highlights in "{{" and "}}"
# Search for documents with the `message` field containing the phrase "HTTP/1.1 200 51"
# As above, but sort the results by the `machine.os` field, in descending order
# As above, but also sort the results by the `timestamp` field, in ascending order

### Run the next queries on the `kibana_sample_data_ecommerce` index
# Search for documents with the `day_of_week` field containing the string "Monday"
# As above, but sort the results by the `products.base_price` field in descending order, picking the lowest value of the array

#LAB STEPS
### Run the next queries on the `kibana_sample_data_logs` index
# Search for documents with the `message` field containing the string "Firefox"
POST kibana_sample_data_logs/_search
{
  "query": {
    "match": {
      "message": "Firefox"
    }
  }
}

# As above, but return up to 50 results
# As above, but return up to 50 results with an offset of 50 from the first
POST kibana_sample_data_logs/_search
{
  "from": 0,
  "size":50,
  "query": {
    "match": {
      "message": "Firefox"
    }
  }
}

POST kibana_sample_data_logs/_search
{
  "from": 50,
  "size":50,
  "query": {
    "match": {
      "message": "Firefox"
    }
  }
}

# Search for documents with the `message` field containing the strings "Firefox" or "Kibana"
GET kibana_sample_data_logs/_search
{
  "size": 10,
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "message": "Firefox"
          }
        },
        {
          "match": {
            "message": "Kibana"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "utc_time": "asc"
    }
  ]
}

GET kibana_sample_data_logs/_search
{
  "size": 10,
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "message": "Firefox"
          }
        },
        {
          "match": {
            "message": "Kibana"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "utc_time": "asc"
    },
    {
      "_id": "asc"
    }
  ]
}

GET kibana_sample_data_logs/_search
{
   "size": 10,
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "message": "Firefox"
          }
        },
        {
          "match": {
            "message": "Kibana"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "utc_time": "asc"
    },
    {
      "_id": "asc"
    }
  ],
  "search_after": [1586047142912, "LPjpbXEBFzUMUPVIvroz"]
}


# Search for documents with the `message` field containing both the strings "Firefox" and "Kibana"
# Search for documents with the `message` field containing at least two of the following strings: "Firefox", "Kibana", "159.64.35.129"
GET kibana_sample_data_logs/_search
{
   "size": 10,
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "message": "Firefox"
          }
        },
        {
          "match": {
            "message": "Kibana"
          }
        }
      ]
    }
  }
}

GET kibana_sample_data_logs/_search
{
   "size": 10,
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "message": "Firefox"
          }
        },
        {
          "match": {
            "message": "Kibana"
          }
        },
         {
          "match": {
            "message": "159.64.35.129"
          }
        }
      ],
      "minimum_should_match": 2
    }
  }
}
# As above, but also return the highlights for the `message` field
# As above, but also wrap the highlights in "{{" and "}}"
GET kibana_sample_data_logs/_search
{
   "size": 10,
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "message": "Firefox"
          }
        },
        {
          "match": {
            "message": "Kibana"
          }
        }
      ]
    }
  },
  "highlight": {
    "fields": {
      "message": { "pre_tags" : ["{{"], "post_tags" : ["}}"]}
    }
  }
}


# Search for documents with the `message` field containing the phrase "HTTP/1.1 200 51"
GET kibana_sample_data_logs/_search
{
   "size": 10,
  "query": {
    "bool": {
      "must": [
        {
          "match_phrase": {
            "message": "HTTP/1.1 200 51"
          }
        }
      ]
    }
  }
}

# As above, but sort the results by the `machine.os` field, in descending order
# As above, but also sort the results by the `timestamp` field, in ascending order
GET kibana_sample_data_logs/_search
{
   "size": 10,
  "query": {
    "bool": {
      "must": [
        {
          "match_phrase": {
            "message": "HTTP/1.1 200 51"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "machine.os.keyword": {
        "order": "desc"
      }
    },
    {
      "timestamp": {
        "order": "asc"
      }
    }
  ]
}


### Run the next queries on the `kibana_sample_data_ecommerce` index
# Search for documents with the `day_of_week` field containing the string "Monday"
# As above, but sort the results by the `products.base_price` field in descending order, picking the lowest value of the array

GET kibana_sample_data_ecommerce/_search
{
  "size": 10,
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "day_of_week": "Monday"
          }
        }
      ]
    }
  },
  "sort": [
    {
      "products.base_price": {
        "order": "desc",
        "mode": "min"
      }
    }
  ]
}

#REFERENCE
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-request-from-size.html
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-request-scroll.html
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-request-search-after.html
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-request-body.html
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-request-highlighting.html
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/query-dsl-match-query-phrase.html
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-request-sort.html
