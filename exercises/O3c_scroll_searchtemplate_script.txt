# ** EXAM OBJECTIVE: QUERIES **
# GOAL: Use scroll API, search templates, script queries
# REQUIRED SETUP: (i) a running Elasticsearch cluster with at least one node and a Kibana instance, (ii) add the "Sample web logs" and "Sample flight data" to Kibana
# Copy-paste the following instructions into your Kibana Dev Tools, and work directly from there

# Search for all documents in all indices
# As above, but use the scroll API to return the first 100 results while keeping the search context alive for 2 minutes
# Use the scroll id included in the response to the previous query and retrieve the next batch of results

### Run the next queries on the `kibana_sample_data_logs` index
# Filter documents with (i) the `response` field greater or equal to 400 and less than 500, and (ii) the `tags` field containing the value "security"
# Create a search template for the above query, so that the template (i) is named "with_response_and_tag", (ii) has a parameter "with_min_response" to represent the lower bound of the `response` field, (iii) has a parameter "with_max_response" to represent the upper bound of the `response` field, (iv) has a parameter "with_tag" to represent a possible value of the `tags` field
# Test the "with_response_and_tag" search template by setting the parameters as follows: (i) "with_min_response": 400, (ii) "with_max_response": 500 (iii) "with_tag": "security"
# Update the "with_response_and_tag" search template, so that (i) if the "with_max_response" parameter is not set, then don't set an upper bound to the `response` value, and (ii) if the "with_tag" parameter is not set, then do not apply that second filter at all
# Test the "with_response_and_tag" search template by setting only the "with_min_response" parameter to 500
# Test the "with_response_and_tag" search template by setting the parameters as follows: (i) "with_min_response": 500, (ii) "with_tag": "security"

#LAB STEPS
# Search for all documents in all indices
# As above, but use the scroll API to return the first 100 results while keeping the search context alive for 2 minutes
# Use the scroll id included in the response to the previous query and retrieve the next batch of results
POST /*/_search?scroll=2m
{
  "size": 100,
  "query": {
    "match_all": {}
  }
}

POST /_search/scroll 
{
    "scroll" : "2m", 
    "scroll_id" : "DnF1ZXJ5VGhlbkZldGNoCAAAAAAAACoYFi10dkQtVHg2UkRpalFkSi0xV25CMlEAAAAAAACFuRZhdFJvNkNBblRMYW9GVmcyMVpBeUh3AAAAAAAB00QWTGlGSW1fRHZTdmlGcjRQWnVubUtTZwAAAAAAACoaFi10dkQtVHg2UkRpalFkSi0xV25CMlEAAAAAAAHTRRZMaUZJbV9EdlN2aUZyNFBadW5tS1NnAAAAAAAAhboWYXRSbzZDQW5UTGFvRlZnMjFaQXlIdwAAAAAAACoZFi10dkQtVHg2UkRpalFkSi0xV25CMlEAAAAAAAHTRhZMaUZJbV9EdlN2aUZyNFBadW5tS1Nn" 
}


### Run the next queries on the `kibana_sample_data_logs` index
# Filter documents with (i) the `response` field greater or equal to 400 and less than 500, and (ii) the `tags` field containing the value "security"
POST kibana_sample_data_logs/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "response": {
              "gte": 400,
              "lt": 500
            }
          }
        },
        {
          "match": {
            "tags": "security"
          }
        }
      ]
    }
  }
}

# Create a search template for the above query, so that the template (i) is named "with_response_and_tag", (ii) has a parameter "with_min_response" to represent the lower bound of the `response` field, (iii) has a parameter "with_max_response" to represent the upper bound of the `response` field, (iv) has a parameter "with_tag" to represent a possible value of the `tags` field

# Test the "with_response_and_tag" search template by setting the parameters as follows: (i) "with_min_response": 400, (ii) "with_max_response": 500 (iii) "with_tag": "security"
# 

POST _scripts/with_response_and_tag
{
  "script": {
    "lang": "mustache",
    "source": {
      "query": {
        "bool": {
          "filter": [
            {
              "range": {
                "response": {
                  "gte": "{{with_min_response}}",
                  "lt": "{{with_max_response}}"
                }
              }
            },
            {
              "match": {
                "tags": "{{with_tag}}"
              }
            }
          ]
        }
      }
    }
  }
}

GET _scripts/with_response_and_tag

GET kibana_sample_data_logs/_search/template
{
    "id": "with_response_and_tag",
    "params": {
    "with_min_response": "400",
    "with_max_response": "500",
    "with_tag": "security"
  }
}


GET _render/template
{
  "id": "with_response_and_tag",
  "params": {
    "with_min_response": "400",
    "with_max_response": "500",
    "with_tag": "security"
    
  }
}

# Update the "with_response_and_tag" search template, so that (i) if the "with_max_response" parameter is not set, then don't set an upper bound to the `response` value, and (ii) if the "with_tag" parameter is not set, then do not apply that second filter at all
# Test the "with_response_and_tag" search template by setting only the "with_min_response" parameter to 500
POST _scripts/with_response_and_tag
{
  "script": {
    "lang": "mustache",
    "source": """{"query":{"bool":{"filter":{{#with_tag}}[{{/with_tag}}{"range":{"response":{"gte":"{{with_min_response}}"{{#with_max_response}},"lt":"{{with_max_response}}"{{/with_max_response}}}}}{{#with_tag}},{"match":{"tags":"{{with_tag}}"}}]{{/with_tag}}}}}""",
    "options": {
      "content_type": "application/json; charset=UTF-8"
    }
  }
}

GET _render/template
{
  "id": "with_response_and_tag",
  "params": {
    "with_min_response": "500"
  }
}

GET kibana_sample_data_logs/_search/template
{
  "id": "with_response_and_tag",
  "params": {
    "with_min_response": "500"
  }
}



# Test the "with_response_and_tag" search template by setting the parameters as follows: (i) "with_min_response": 500, (ii) "with_tag": "security"

GET kibana_sample_data_logs/_search/template
{
  "id": "with_response_and_tag",
  "params": {
    "with_min_response": "500",
    "with_tag": "security"
  }
}


### Run the next queries on the `kibana_sample_data_flights` index
# Filter documents with the `OriginWeather` and `DestWeather` fields set to the same value

GET kibana_sample_data_flights/_search
{
    "query": {
        "bool" : {
            "filter" : {
                "script" : {
                    "script" : {
                        "source": "doc['OriginWeather'].value == doc['DestWeather'].value ",
                        "lang": "painless"
                     }
                }
            }
        }
    }
}



#REFERENCE
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-request-scroll.html
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/query-filter-context.html
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/search-template.html
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/modules-scripting-using.html
http://mustache.github.io/mustache.5.html
https://www.elastic.co/guide/en/elasticsearch/reference/7.2/query-dsl-script-query.html
