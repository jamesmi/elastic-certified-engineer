# ** EXAM OBJECTIVE: AGGREGATIONS **
# GOAL: Create metrics, bucket, and pipeline aggregations
# REQUIRED SETUP: (i) a running Elasticsearch cluster with at least one node and a Kibana instance, (ii) add the "Sample flight data" to Kibana
# Copy-paste the following instructions into your Kibana Dev Tools, and work directly from there

### Run the next queries on the `kibana_sample_data_flights` index
# Create an aggregation named "max_distance" that calculates the maximum value of the `DistanceKilometers` field
# Create an aggregation named "stats_flight_time" that computes stats over the value of the `FlightTimeMin` field
# Create two aggregations, named "cardinality_origin_cities" and "cardinality_dest_cities", that calculate an (approximate) count of distinct values of the `OriginCityName` and `DestCityName` fields, respectively
# Create an aggregation named "popular_origin_cities" that calculates the number of flights grouped by the `OriginCityName` field
# As above, but return only 5 buckets and in descending order
# Create an aggregation named "avg_price_histogram" that groups the documents based on their `AvgTicketPrice` field by intervals of 250
# Create an aggregation named "popular_carriers" that calculates the number of flights grouped by the `Carrier` field
# Add a sub-aggregation to "popular_carriers", named "carrier_stats_delay", that computes stats over the value of the `FlightDelayMin` field for the related bucket of carriers
# Add a second sub-aggregation to "popular_carriers", named "carrier_max_delay", that shows the flight having the maximum value of the `FlightDelayMin` field for the related bucket of carriers
# Use the `timestamp` field to create an aggregation named "flights_every_10_days" that groups the number of flights by an interval of 10 days
# Use the `timestamp` field to create an aggregation named "flights_by_day" that groups  the number of flights by day
# Add a sub-aggregation to “flights_by_day”, named “destinations_by_day”, that groups the day buckets by the value of the `DestCityName` field
# Add a sub-aggregation to the sub-aggregation "destinations_by_day", named "popular_destinations_by_day", that returns the 3 most popular documents for each bucket (i.e., ordered by their score)
# Update “popular_destinations_by_day” to display only the `DestCityName` field in for each top hit object
# Remove the "popular_destinations_by_day” sub-sub-aggregation from “flights_by_day”
# Add a pipeline aggregation to "flights_by_day", named "most_popular_destination_of_the_day", that identifies the "popular_destinations_by_day” bucket with the most documents for each day
# Add a pipeline aggregation named "day_with_most_flights" that identifies the “flights_by_day” bucket with the most documents
# Add a pipeline aggregation named "day_with_the_most_popular_destination_over_all_days" that identifies the “flights_by_day” bucket with the largest “most_popular_destination_of_the_day” value

